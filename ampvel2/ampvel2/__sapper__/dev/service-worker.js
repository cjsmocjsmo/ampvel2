(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1620455234966;

	const files = [
		"/service-worker-index.html",
		"/Invincible.jpg",
		"/alienworlds.jpg",
		"/alteredcarbon.jpg",
		"/discovery.jpg",
		"/enterprise.jpg",
		"/falconwintersoldier.jpg",
		"/favicon.png",
		"/forallmankind.jpg",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/lostinspace.jpg",
		"/lowerdecks.jpg",
		"/mandalorian.jpg",
		"/manifest.json",
		"/nextgen.jpg",
		"/orville.jpg",
		"/picard.jpg",
		"/raisedbywolves.jpg",
		"/sttv.jpg",
		"/thebadbatch.jpg",
		"/voyager.jpg",
		"/wandavision.jpg"
	];

	const shell = [
		"/client/client.1a3d12a8.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.e2778012.js",
		"/client/Controls.6bffd1de.js",
		"/client/falconwintersoldier.e919b487.js",
		"/client/nextgeneration.54997287.js",
		"/client/raisedbywolves.be047f80.js",
		"/client/alteredcarbon.ddda42dc.js",
		"/client/forallmankind.abe1a420.js",
		"/client/indianajones.ef40ade3.js",
		"/client/jurassicpark.c4b608f1.js",
		"/client/alienworlds.06fd2dd3.js",
		"/client/brucewillis.7d49be00.js",
		"/client/documentary.b47f95be.js",
		"/client/harrypotter.64d2364a.js",
		"/client/lostinspace.c5a5803f.js",
		"/client/mandalorian.fb32d3e6.js",
		"/client/thebadbatch.9b93b195.js",
		"/client/wandavision.9931376a.js",
		"/client/enterprise.9d7955fa.js",
		"/client/invincible.7046dd7a.js",
		"/client/lowerdecks.5a30ef1c.js",
		"/client/meninblack.37c15ec9.js",
		"/client/seancarrol.361e81d9.js",
		"/client/superheros.6d3bc281.js",
		"/client/discovery.312a418e.js",
		"/client/johnwayne.bae9cdc7.js",
		"/client/spacetime.207a3bbf.js",
		"/client/tomcruize.334206c1.js",
		"/client/cartoons.cfee6864.js",
		"/client/godzilla.05978d72.js",
		"/client/johnwick.c9b8507f.js",
		"/client/kingsmen.3f67a18c.js",
		"/client/lastship.f771c3fc.js",
		"/client/startrek.62c5f38d.js",
		"/client/starwars.2332f752.js",
		"/client/fantasy.af6b50c9.js",
		"/client/orville.9e7fc938.js",
		"/client/pirates.5d0161d3.js",
		"/client/riddick.94958e87.js",
		"/client/therock.c3d7ab9a.js",
		"/client/tremors.59e8d356.js",
		"/client/tvshows.db7eb1f4.js",
		"/client/voyager.6c4b7b41.js",
		"/client/action.6cb40a53.js",
		"/client/comedy.846fa834.js",
		"/client/picard.c5c541cc.js",
		"/client/drama.fad23e18.js",
		"/client/scifi.f006b78b.js",
		"/client/misc.be66a249.js",
		"/client/sttv.996b09f0.js",
		"/client/xmen.8f8a8703.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

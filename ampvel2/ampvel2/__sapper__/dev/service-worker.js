(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1617575277067;

	const files = [
		"/service-worker-index.html",
		"/alienworlds.jpg",
		"/alteredcarbon.jpg",
		"/discovery.jpg",
		"/enterprise.jpg",
		"/falconwintersoldier.jpg",
		"/favicon.png",
		"/forallmankind.jpg",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/lostinspace.jpg",
		"/lowerdecks.jpg",
		"/mandalorian.jpg",
		"/manifest.json",
		"/nextgen.jpg",
		"/orville.jpg",
		"/picard.jpg",
		"/raisedbywolves.jpg",
		"/sttv.jpg",
		"/voyager.jpg",
		"/wandavision.jpg"
	];

	const shell = [
		"/client/client.3ddcd3a0.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.997ec2b9.js",
		"/client/Controls.d88ac1ab.js",
		"/client/falconwintersoldier.869482ac.js",
		"/client/nextgeneration.b88b1766.js",
		"/client/raisedbywolves.d64d5639.js",
		"/client/alteredcarbon.f28ccc40.js",
		"/client/forallmankind.ee6d154f.js",
		"/client/indianajones.133dfdd2.js",
		"/client/jurassicpark.b54a7efb.js",
		"/client/alienworlds.847ac253.js",
		"/client/brucewillis.ca20eb2d.js",
		"/client/documentary.597149fa.js",
		"/client/harrypotter.5e05d207.js",
		"/client/lostinspace.29078f98.js",
		"/client/mandalorian.8f5b371a.js",
		"/client/wandavision.f4994da5.js",
		"/client/enterprise.5c32ec4d.js",
		"/client/lowerdecks.e19181c4.js",
		"/client/meninblack.ba0b7da4.js",
		"/client/seancarrol.622bd6d4.js",
		"/client/superheros.f94efc1f.js",
		"/client/discovery.acbdb6fe.js",
		"/client/johnwayne.715b8044.js",
		"/client/spacetime.0f208297.js",
		"/client/tomcruize.f43c32fd.js",
		"/client/cartoons.1caaf474.js",
		"/client/godzilla.c5074e6f.js",
		"/client/johnwick.ebf4e337.js",
		"/client/kingsmen.6a6a6dfb.js",
		"/client/lastship.b85399c2.js",
		"/client/startrek.bf9be203.js",
		"/client/starwars.37ea2b81.js",
		"/client/fantasy.d798ff0b.js",
		"/client/orville.5a040c62.js",
		"/client/pirates.ae4a02de.js",
		"/client/riddick.50edfa28.js",
		"/client/therock.34872834.js",
		"/client/tremors.ac945f3e.js",
		"/client/tvshows.a8bc0265.js",
		"/client/voyager.fc9e1844.js",
		"/client/action.5914debd.js",
		"/client/comedy.34ac8369.js",
		"/client/picard.67563f9c.js",
		"/client/drama.8e3ae84a.js",
		"/client/scifi.cce56274.js",
		"/client/misc.a482f546.js",
		"/client/sttv.1fcc0a3d.js",
		"/client/xmen.942ac5d9.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

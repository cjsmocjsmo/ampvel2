(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1617031821454;

	const files = [
		"/service-worker-index.html",
		"/favicon.png",
		"/global.css",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.6dc2847d.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.87dc043b.js",
		"/client/Controls.4b712e02.js",
		"/client/nextgeneration.40a90f20.js",
		"/client/raisedbywolves.3ad4ff0a.js",
		"/client/alteredcarbon.deacfabc.js",
		"/client/forallmankind.84826646.js",
		"/client/indianajones.71e8e162.js",
		"/client/jurassicpark.ab34074f.js",
		"/client/alienworlds.1817f7a1.js",
		"/client/brucewillis.5d0a36d9.js",
		"/client/documentary.15ff9e4c.js",
		"/client/harrypotter.92123ced.js",
		"/client/lostinspace.b01063c5.js",
		"/client/mandalorian.4c514734.js",
		"/client/enterprise.0e95db35.js",
		"/client/lowerdecks.78b7c87a.js",
		"/client/meninblack.f7a5ee73.js",
		"/client/seancarrol.e453146a.js",
		"/client/superheros.6a8d1eab.js",
		"/client/discovery.27c35116.js",
		"/client/johnwayne.b7fa1da7.js",
		"/client/spacetime.02077178.js",
		"/client/tomcruize.acf6b96c.js",
		"/client/cartoons.73ffb57a.js",
		"/client/godzilla.cddd9762.js",
		"/client/johnwick.811d50a7.js",
		"/client/kingsmen.0e6c41aa.js",
		"/client/lastship.c087e5a7.js",
		"/client/startrek.defa16fc.js",
		"/client/starwars.0c8183be.js",
		"/client/fantasy.8f3a5102.js",
		"/client/orville.ca8da6b7.js",
		"/client/pirates.96bd8877.js",
		"/client/riddick.c5f85375.js",
		"/client/therock.0e6be406.js",
		"/client/tremors.507f5283.js",
		"/client/tvshows.92f99348.js",
		"/client/voyager.1449a673.js",
		"/client/action.ab9cad2e.js",
		"/client/comedy.0525e87a.js",
		"/client/picard.8e99cf2b.js",
		"/client/drama.415f054f.js",
		"/client/scifi.585d2264.js",
		"/client/misc.f66191ee.js",
		"/client/sttv.1e2ecbfc.js",
		"/client/xmen.2d05a43b.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

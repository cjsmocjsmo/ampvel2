import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, F as element, t as text, l as space, m as create_component, c as claim_element, b as children, e as claim_text, f as detach_dev, o as claim_space, p as claim_component, g as attr_dev, h as add_location, j as insert_dev, k as append_dev, r as mount_component, n as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.bf3c7ae3.js';
import { C as Controls } from './Controls.bb681c90.js';

/* src/routes/seancarrol.svelte generated by Svelte v3.30.0 */
const file = "src/routes/seancarrol.svelte";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let controls;
	let t2;
	let nav;
	let button;
	let t3;
	let current;
	controls = new Controls({ $$inline: true });

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Sean Carroll Phd");
			t1 = space();
			create_component(controls.$$.fragment);
			t2 = space();
			nav = element("nav");
			button = element("button");
			t3 = text("Season 1");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Sean Carroll Phd");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(controls.$$.fragment, nodes);
			t2 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			button = claim_element(nav_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t3 = claim_text(button_nodes, "Season 1");
			button_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-l04qxq");
			add_location(h1, file, 4, 0, 77);
			attr_dev(button, "class", "svelte-l04qxq");
			add_location(button, file, 7, 4, 126);
			add_location(nav, file, 6, 0, 116);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			mount_component(controls, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, nav, anchor);
			append_dev(nav, button);
			append_dev(button, t3);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(controls.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(controls.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			destroy_component(controls, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(nav);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Seancarrol", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Seancarrol> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Controls });
	return [];
}

class Seancarrol extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Seancarrol",
			options,
			id: create_fragment.name
		});
	}
}

export default Seancarrol;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhbmNhcnJvbC4xYjVlZWZmNC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
